{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/alert-popup/alert-popup.component.ts","webpack:///src/app/alert-popup/alert-popup.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/card.service.ts","webpack:///src/app/chat/chat.component.ts","webpack:///src/app/chat/chat.component.html","webpack:///src/app/game-view/game-view.component.ts","webpack:///src/app/game-view/game-view.component.html","webpack:///src/app/lobby.service.ts","webpack:///src/app/main-menu/main-menu.component.ts","webpack:///src/app/main-menu/main-menu.component.html","webpack:///src/app/my-cards/my-cards.component.ts","webpack:///src/app/my-cards/my-cards.component.html","webpack:///src/app/page-not-found/page-not-found.component.ts","webpack:///src/app/page-not-found/page-not-found.component.html","webpack:///src/app/player-block/player-block.component.ts","webpack:///src/app/player-block/player-block.component.html","webpack:///src/app/playing-card/playing-card.component.ts","webpack:///src/app/playing-card/playing-card.component.html","webpack:///src/app/results-popup/results-popup.component.ts","webpack:///src/app/results-popup/results-popup.component.html","webpack:///src/app/room-code/room-code.component.ts","webpack:///src/app/socket.service.ts","webpack:///src/entity/Card.ts","webpack:///src/entity/data-structures/card-modes.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AlertPopupComponent","alertTitle","alertMessage","close","bodyText","nativeElement","textContent","titleText","popupIsOpen","selector","templateUrl","styleUrls","read","routes","AppRoutingModule","forRoot","imports","browserRefresh","AppComponent","router","title","subscription","events","subscribe","event","navigated","unsubscribe","appRoutes","path","component","redirectTo","pathMatch","AppModule","declarations","providers","bootstrap","CardService","http","socketService","hostName","get","cardNum","connectedRoom","providedIn","ChatComponent","chatOpened","chatMessages","console","log","socket","chatSubscription","receiveChatMessage","msg","push","sendChatMessage","message","state","onToggleChat","onSendChat","GameViewComponent","cardService","card1","card2","card3","navigate","initRoutingSubscription","isTurn","isTurnOnStart","playerList","allOtherPlayersOnStart","firstPlayer","length","initCardMode","initTurnSubscription","initPlayerListSubscription","initVoteResultsSubscription","initRoundIsCancelledSubscription","initCardPickedSubscription","setTimeout","alertPopup","open","voteResultsSubscription","getVoteResults","results","overallResults","winners","cardText","resultsPopup","roundIsCancelledSubscription","getRoundIsCancelled","isNewHost","currMode","waiting","cardPickedSubscription","getPickedCard","roomEmpty","myTurn","voting","votingPhrase","playerListSubscription","getOtherPlayerList","plist","isTurnSubscription","getIsTurn","getThreeCards","cardArray","err","routingSubscription","disconnectSocket","LobbyService","hostname","lobbyCode","responseType","username","MainMenuComponent","lobbyService","emptyName","invalidName","name","showNameField","joiningGame","invalidRoom","setUpSocket","gameExplanation","step1","step2","step3","step4","step5","newLine","checkRoom","res","status","checkName","onConnectGoToGame","joinExistingRoom","joinNewRoom","isConnectedSubscription","getIsConnected","MyCardsComponent","initMyCardsSubscription","myCardsSubscription","getMyCards","cards","myCards","PageNotFoundComponent","PlayerBlockComponent","voted","votingEnabled","changes","voteButton","submitVote","player","cardVotingOn","emit","vote","PlayingCardComponent","cardFlipTime","undefined","transitionToNewMode","cardData","card_text","backendCardSubscription","card","transitionCardToFace","votingPhraseText","disableCardChooseButton","choiceButtonIsDisabled","choiceButton","classList","contains","toggle","face","cardIsOnFace","numPlayers","pickCard","onCardClick","onCardPicked","ResultsPopupComponent","isAtie","tiedWinners","voteResults","winner","parsedResults","reachedArrElements","sort","a","b","forEach","includes","numVotes","filter","value","cardToSend","resultsText","parseVoteResults","voteWinner","selectedPlayer","sendVoteResultsToOtherPlayers","giveUpTurn","RoomCodeComponent","SocketService","allPlayers","output","Id","observable","observer","on","turn","getAllOtherPlayersList","next","disconnect","desiredRoom","idNextRoundHost","cardObject","playerVotedFor","Card","json","_id","card_num","cardMode","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-alert-popup',\n  templateUrl: './alert-popup.component.html',\n  styleUrls: ['./alert-popup.component.css']\n})\nexport class AlertPopupComponent implements OnInit {\n  @ViewChild(\"alertTitle\", {read: ElementRef}) titleText: ElementRef;\n  @ViewChild(\"alertBody\", {read: ElementRef}) bodyText: ElementRef;\n\n  popupIsOpen : boolean;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  open(alertTitle:string, alertMessage: string) : void {\n    close();\n    this.bodyText.nativeElement.textContent = alertMessage;\n    this.titleText.nativeElement.textContent = alertTitle;\n    this.popupIsOpen = true;\n  }\n  close() : void {\n    this.popupIsOpen = false;\n  }\n}\n","<div class=\"modal fade\" id=\"alertModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"alertModalTitle\" aria-hidden=\"true\" [ngStyle]=\"{'display': popupIsOpen ? 'block' : 'none', 'opacity': 1}\">\n    <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"alertModalTitle\" #alertTitle></h5>\n        </div>\n        <div class=\"modal-body\">\n          <p #alertBody></p>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\" (click)=\"close()\">Close</button>\n        </div>\n      </div>\n    </div>\n  </div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nexport let browserRefresh = false;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'client';\n  subscription: Subscription;\n\n  constructor(private router: Router) {\n    this.subscription = router.events.subscribe((event) => {\n        if (event instanceof NavigationStart) {\n          browserRefresh = !router.navigated;\n        }\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GameViewComponent } from './game-view/game-view.component';\nimport { MainMenuComponent } from './main-menu/main-menu.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { PlayingCardComponent } from './playing-card/playing-card.component';\nimport { PlayerBlockComponent } from './player-block/player-block.component';\nimport { MyCardsComponent } from './my-cards/my-cards.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ChatComponent } from './chat/chat.component';\nimport { ResultsPopupComponent } from './results-popup/results-popup.component';\nimport { AlertPopupComponent } from './alert-popup/alert-popup.component';\nimport { RoomCodeComponent } from './room-code/room-code.component'; \n\nconst appRoutes: Routes = [\n  { path: 'game', component: GameViewComponent },\n  { path: 'main', component: MainMenuComponent },\n  { path: '',   redirectTo: '/main', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GameViewComponent,\n    MainMenuComponent,\n    PageNotFoundComponent,\n    PlayingCardComponent,\n    PlayerBlockComponent,\n    MyCardsComponent,\n    ChatComponent,\n    ResultsPopupComponent,\n    AlertPopupComponent,\n    RoomCodeComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot(\n      appRoutes,\n      //{ enableTracing: true } // <-- debugging purposes only, navigation events are logged\n    )\n  ],\n  \n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport Card from 'src/entity/Card';\nimport { SocketService } from './socket.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CardService {\n  //hostName: String = 'http://localhost:3000';\n  //hostName = 'https://strawberry-sundae-17314.herokuapp.com';\n  hostName = 'http://www.qcards.us';\n\n  constructor(private http: HttpClient, private socketService: SocketService) { }\n\n  getCards(): Observable<Card[]> {\n    return this.http.get<Card[]>(`${this.hostName}/api/cards`);\n  }\n\n  getCard(cardNum): Observable<Card> {\n    return this.http.get<Card>(`${this.hostName}/api/cardByNum/` + cardNum);\n  }\n\n  getThreeCards(): Observable<Card[]> {\n    return this.http.get<Card[]>(`${this.hostName}/api/threeCards/${this.socketService.connectedRoom}`);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SocketService } from '../socket.service';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit {\n  chatOpened: boolean = false;\n  chatSubscription: Subscription;\n  chatMessages: string[] = [];\n  message: string;\n  \n\n  constructor( private socketService: SocketService ) { }\n\n  ngOnInit(): void {\n    console.log(this.socketService.socket.id);\n\n    this.chatSubscription = this.socketService.receiveChatMessage().subscribe( (msg) => {\n      console.log(this.chatMessages);\n      this.chatMessages.push(msg);\n    });\n  }\n\n  onSendChat(): void {\n    this.socketService.sendChatMessage(this.message);\n    this.message = '';\n  }\n\n  onToggleChat(state: boolean) {\n    this.chatOpened = state;\n  }\n\n  ngOnDestroy(): void {\n    if (this.chatSubscription) {\n      this.chatSubscription.unsubscribe();\n    }\n  }\n\n}\n","<button class=\"open-button tri-right btm-left\"\n  (click)=\"onToggleChat(true)\"\n  [ngStyle]=\"{ 'width' : chatOpened ? '3.5em' : '4.5em' }\"\n  [ngClass]=\"{ 'x' : chatOpened }\">{{ chatOpened ? 'X' : 'Chat' }}</button>\n\n<div class=\"chat-popup\" id=\"myForm\" [ngStyle]=\"{ 'display' : chatOpened ? 'block' : 'none' }\">\n  <form class=\"form-container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <h2>Chat</h2>\n      </div>\n      <div class=\"col text-right\">\n        <button type=\"button\" class=\"btn cancel\" (click)=\"onToggleChat(false)\">X</button>\n      </div>\n    </div>\n    <div class=\"row messages-container\">\n      <div class=\"col\">\n          <div class=\"chat-message\"\n            *ngFor=\"let msg of chatMessages; let i = index\"\n            [ngStyle]=\"{ 'background-color' :  i % 2 == 0 ? '#dbdbdb' : 'white'}\"> {{ msg }}\n          </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <textarea placeholder=\"Write something to your friends!\" [(ngModel)]=\"message\" name=\"msg\" rows=\"2\" required></textarea>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col text-right\">\n        <button type=\"submit\" class=\"btn\" (click)=\"onSendChat()\">Send</button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { SocketService } from '../socket.service';\nimport { Subscription } from 'rxjs';\nimport { NavigationStart, Router } from '@angular/router';\nimport { Output } from '@angular/core';\n\nimport { browserRefresh } from '../app.component';\nimport { cardMode } from '../../entity/data-structures/card-modes';\nimport { ResultsPopupComponent } from '../results-popup/results-popup.component';\nimport { AlertPopupComponent } from '../alert-popup/alert-popup.component';\nimport Card from 'src/entity/Card';\nimport { CardService } from '../card.service';\n\n@Component({\n  selector: 'app-game-view',\n  templateUrl: './game-view.component.html',\n  styleUrls: ['./game-view.component.css']\n})\nexport class GameViewComponent implements OnInit {\n  browserRefresh: boolean;\n  @Output() currMode : cardMode;\n\n  @ViewChild(ResultsPopupComponent) resultsPopup: ResultsPopupComponent;\n  @ViewChild(AlertPopupComponent) alertPopup: AlertPopupComponent;\n  card1 : Card = new Card(null);\n  card2 : Card = new Card(null);\n  card3 : Card = new Card(null);\n\n  isTurn : boolean;\n  firstPlayer : boolean;\n  @Output() votingPhrase : string;\n\n  routingSubscription: Subscription;\n  //updates player when turns are tranferred in the game\n  isTurnSubscription: Subscription;\n  //updates the list of other players currently in the game\n  playerListSubscription: Subscription;\n  //signals to the player when a card is picked to vote on\n  cardPickedSubscription: Subscription;\n  //signals to the player when vote results are available after a round of voting\n  voteResultsSubscription: Subscription;\n  //signals to player when a round is cancelled because someone who was collecting votes leaves\n  roundIsCancelledSubscription: Subscription;\n\n  playerList: Array<any>;\n\n  constructor( private socketService: SocketService,\n    private cardService: CardService,\n    private router: Router) {}\n\n  ngOnInit(): void {\n    console.log(\"init game view\");\n    \n    this.browserRefresh = browserRefresh;\n    if (this.browserRefresh) {\n      this.router.navigate(['/']);\n      return;\n    }\n\n    this.initRoutingSubscription();\n    \n    //initialize turn boolean\n    this.isTurn = this.socketService.isTurnOnStart;\n    //initialize list of players\n    this.playerList = this.socketService.allOtherPlayersOnStart;\n    this.firstPlayer = this.isTurn && this.playerList.length == 0;\n\n    this.initCardMode();\n    this.initTurnSubscription();\n    this.initPlayerListSubscription();\n    this.initVoteResultsSubscription();\n    this.initRoundIsCancelledSubscription();\n  }\n\n  ngAfterViewInit(): void {\n    this.initCardPickedSubscription();\n    //welcome message\n    //TODO this throws an error, fix it\n    if(this.firstPlayer) {\n      //the \"setTimeout\" avoids the ExpressionChangedAfterChecked error I was getting\n      setTimeout(() => {\n        this.alertPopup.open(\"You look lonely...\", \"Send the game code at the top of the screen to your friends so they can join you!\");\n      });\n    }\n    else if (!this.isTurn){\n      setTimeout(() => {\n        this.alertPopup.open(\"Welcome Aboard\", \"Wait for your friend to pick a card, then vote for whoever you think the card best fits!\");\n      });\n    }\n  }\n  \n  initVoteResultsSubscription() : void {\n    //subscription returns an array with [overallResults including number votes each player got, \n    //                                    array of all winners (multiple in case of a tie),\n    //                                    the text of the card that was voted on]\n    this.voteResultsSubscription = this.socketService.getVoteResults().subscribe((results) => {\n      var overallResults = results[0];\n      var winners = results[1];\n      var cardText = results[2];\n\n      if(this.isTurn) {\n        this.resultsPopup.open(overallResults, winners, cardText);\n      }\n      else {\n        this.alertPopup.open(\"Voting done!\", \"Wait for this round's card reader to reveal the results with the group\");\n      }\n    });\n  }\n  initRoundIsCancelledSubscription() : void {\n    this.roundIsCancelledSubscription = this.socketService.getRoundIsCancelled().subscribe((isNewHost) => {\n      if(!isNewHost){\n        this.currMode = cardMode.waiting;\n      }\n      \n      this.alertPopup.open(\"Someone Left\", \"The numb nut who was supposed to collect the vote results left the game. Restarting the previous round.\");\n    });\n  }\n  initCardPickedSubscription() : void {\n    this.cardPickedSubscription = this.socketService.getPickedCard().subscribe((cardText) => {\n      \n      var roomEmpty = this.playerList.length == 0;\n      if(!roomEmpty) {\n        //wait for the other players to vote\n        if(this.currMode == cardMode.myTurn) { \n          this.currMode = cardMode.waiting;\n        }\n        //allow voters to vote since a card was picked, and display the card\n        else { \n          this.currMode = cardMode.voting;\n          this.votingPhrase = cardText;\n        }\n      }\n      else {\n        this.alertPopup.open(\"Empty room...\", \"You can't pick a card if there's no one to vote\");\n      }\n    });\n  }\n  initPlayerListSubscription() : void {\n    this.playerListSubscription = this.socketService.getOtherPlayerList().subscribe( (plist) => {\n      this.playerList = plist;\n      if(plist.length == 0) {\n        this.alertPopup.open(\"Empty room...\", \"Where did all your friends go?\");\n        this.currMode = cardMode.myTurn;\n      }\n    });\n  }\n\n  initTurnSubscription() : void {\n    this.isTurnSubscription = this.socketService.getIsTurn().subscribe( (isTurn) => {\n      this.isTurn = isTurn;\n      if(isTurn) {\n        this.cardService.getThreeCards().subscribe( cardArray => {\n          this.card1 = cardArray[0];\n          this.card2 = cardArray[1];\n          this.card3 = cardArray[2];\n          this.currMode = cardMode.myTurn;\n        }, err => {\n          console.log(err);\n        });\n      }\n      else {\n        this.currMode = cardMode.waiting;\n      }\n      \n    });\n  }\n  initRoutingSubscription() : void {\n    this.routingSubscription = this.router.events.subscribe( event => {\n      if (event instanceof NavigationStart ) {\n        this.socketService.disconnectSocket();\n      }\n    });\n  }\n  \n  initCardMode() : void {\n    //initially, get card mode and list of players other than current player\n    if(this.socketService.isTurnOnStart) {\n      this.cardService.getThreeCards().subscribe( cardArray => {\n        this.card1 = cardArray[0];\n        this.card2 = cardArray[1];\n        this.card3 = cardArray[2];\n        this.currMode = cardMode.myTurn;\n      }, err => {\n        console.log(err);\n      });\n    }\n    else {\n      this.currMode = cardMode.waiting;\n    }\n  }\n  \n  onVoted(): void {\n    this.currMode = cardMode.waiting;\n  }\n\n  getRoomCode(): string {\n    return this.socketService.connectedRoom;\n  }\n\n  ngOnDestroy(): void {\n    if(this.routingSubscription) {\n      this.routingSubscription.unsubscribe();\n    }\n    if(this.isTurnSubscription) {\n      this.isTurnSubscription.unsubscribe();\n    }\n    if(this.playerListSubscription) {\n      this.playerListSubscription.unsubscribe();\n    }\n    if(this.cardPickedSubscription) {\n      this.cardPickedSubscription.unsubscribe();\n    }\n    if(this.voteResultsSubscription) {\n      this.voteResultsSubscription.unsubscribe();\n    }\n    if(this.roundIsCancelledSubscription) {\n      this.roundIsCancelledSubscription.unsubscribe();\n    }\n  }\n\n}\n","<div class=\"container\">\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <!-- <app-room-code [lobbyCode]=\"getRoomCode()\"></app-room-code> -->\n      <h2 id=\"room-code\">ROOM CODE: <span id=\"code\">{{ getRoomCode() }}</span></h2>\n    </div>\n  </div>\n\n  <div class=\"row player-space justify-content-between\">\n    <div class=\"col\">\n      <div class=\"card text-white player-block-container\">\n        <div *ngIf=\"playerList.length > 0; else noPlayers\" class=\"row\">\n          <app-player-block class=\"col-4\" *ngFor=\"let player of playerList;\" [player]=\"player\" [currMode]=\"currMode\"\n          [cardVotingOn] = \"votingPhrase\" (voted)=\"onVoted()\"></app-player-block>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #noPlayers>\n    <h5 id=\"no-players\">No other players :(</h5>\n  </ng-template>\n\n  <div class=\"row\" #cards>\n    <div class=\"col-4 card-col\">\n      <app-playing-card [currMode]=\"currMode\" [cardData]=\"card1\" [numPlayers]=\"playerList.length\"></app-playing-card>\n    </div>\n    <div class=\"col-4 card-col\">\n      <app-playing-card [currMode]=\"currMode\" [cardData]=\"card2\" [numPlayers]=\"playerList.length\"\n        [votingPhraseText]=\"votingPhrase\"></app-playing-card>\n    </div>\n    <div class=\"col-4 card-col\">\n      <app-playing-card [currMode]=\"currMode\" [cardData]=\"card3\" [numPlayers]=\"playerList.length\"></app-playing-card>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <div id=\"mycards\">\n        <app-my-cards></app-my-cards>\n      </div>\n    </div>\n  </div>\n\n  <!-- Pop up boxes -->\n  <div class=\"row\">\n    <div class=\"col\">\n      <app-results-popup #resultsPopup></app-results-popup>\n    </div>\n    <div class=\"col\">\n      <app-alert-popup #alertPopup></app-alert-popup>\n    </div>\n  </div>\n\n\n  <!-- <div class=\"row\">\n        <div class=\"col\">\n            <app-chat></app-chat>\n        </div>\n    </div> -->\n\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LobbyService {\n  //hostname: string = 'http://localhost:3000';\n  //hostname = 'https://strawberry-sundae-17314.herokuapp.com';\n  hostname = 'http://www.qcards.us';\n\n  constructor(private http : HttpClient) { }\n\n  checkRoom(lobbyCode: string) : Observable<any> {\n    return this.http.get(`${this.hostname}/api/checkRoom/${lobbyCode}`, {responseType: 'text'});\n  }\n\n  checkName(lobbyCode: string, username: string) : Observable<any> {\n    return this.http.get(`${this.hostname}/api/checkUser/${lobbyCode}/${username}`, {responseType: 'text'});\n  }\n}\n","import { Component, OnInit, ViewChild, ɵSWITCH_RENDERER2_FACTORY__POST_R3__ } from '@angular/core';\nimport { SocketService } from '../socket.service';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { LobbyService } from '../lobby.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AlertPopupComponent } from '../alert-popup/alert-popup.component';\n\n@Component({\n  selector: 'app-main-menu',\n  templateUrl: './main-menu.component.html',\n  styleUrls: ['./main-menu.component.css']\n})\nexport class MainMenuComponent implements OnInit {\n  @ViewChild(AlertPopupComponent) alertPopup: AlertPopupComponent;\n\n  lobbyCode: string;\n  isConnectedSubscription: Subscription;\n  showNameField: boolean;\n  emptyName: boolean = false;\n  invalidName: boolean = false;\n  joiningGame: boolean;\n  invalidRoom: boolean;\n  name: string = '';\n\n  constructor( private socketService: SocketService,\n    private router: Router,\n    private lobbyService: LobbyService) { }\n\n  ngOnInit(): void {\n    this.showNameField = false;\n    this.joiningGame = false;\n    this.invalidRoom = false;\n    this.socketService.setUpSocket();\n  }\n\n  onStartGame() {\n    this.invalidRoom = false;\n    this.showNameField = true;\n  }\n\n  onGetGameInfo() {\n    var gameExplanation : string = \"Quarantine Cards is a virtual card game created by 2 Cal Poly studs in the hopes of entertaining and connecting our fellow college students. Here's how it works:\";\n    var step1 : string = \"1. Get all your friends in a game using your game's room code\";\n    var step2 : string = \"2. When it's your turn, you will have the option to pick 1 of 3 cards\";\n    var step3 : string = \"3. Your friends will vote for who they think the card best matches with\";\n    var step4 : string = \"4. If there is a tie, you will be in charge of breaking it!\";\n    var step5 : string = \"5. Play as many rounds as you like\"\n    var step5 : string = \"5. Tell more people about our game :->\"\n\n    var newLine : string = \"\\n\";\n    this.alertPopup.open(\"How To Play\", gameExplanation + \"\\n\\n\" + step1 + \"\\n\" + step2 + \"\\n\" + step3 + \"\\n\" +step4 + \"\\n\" + step5);\n  }\n\n  onJoinGame() {\n    console.log(this.lobbyCode);\n    this.lobbyService.checkRoom(this.lobbyCode).subscribe(res => {\n      this.joiningGame = true;\n      this.invalidRoom = false;\n      this.showNameField = true;\n    }, err => {\n      console.log(err);\n      if (err instanceof HttpErrorResponse) {\n        if (err.status == 401) {\n            this.invalidRoom = true;\n        }\n      }\n    });\n  }\n\n  onEnterName() {\n    // check empty names\n    console.log(this.name);\n    if (this.name === '') {\n      this.emptyName = true;\n      this.invalidName = false;\n      return;\n    }\n    else {\n      this.emptyName = false;\n    }\n    console.log('before');\n    this.lobbyService.checkName(this.lobbyCode, this.name).subscribe( res => {\n      console.log('yis');\n      this.onConnectGoToGame();\n      if (this.joiningGame) {\n        this.socketService.joinExistingRoom(this.lobbyCode, this.name);\n      }\n      else {\n        this.socketService.joinNewRoom(this.name);\n      }\n    }, err => {\n      console.log(err);\n      if (err instanceof HttpErrorResponse) {\n        if (err.status == 401) {\n          this.invalidName = true;\n        }\n      }\n    })\n  }\n\n  onConnectGoToGame(){\n    if(!this.isConnectedSubscription){\n      this.isConnectedSubscription = this.socketService.getIsConnected().subscribe( () => {\n        this.router.navigate(['/game']);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.isConnectedSubscription) {\n      this.isConnectedSubscription.unsubscribe();\n    }\n  }\n\n}\n","<div class = \"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <h1>Quarantine Cards.</h1>\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"!this.showNameField\">\n    <div class=\"col\">\n      <button type=\"button\" class=\"btn btn-lg btn-primary buttonPadding\" id=\"startGameButton\" (click)=\"onStartGame()\">Start a new game!</button>\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"!this.showNameField\">\n    <div class=\"col\">\n      <h2 class=\"separator\">OR</h2>\n    </div>\n  </div>\n  <!-- ROOM CODE FIELD -->\n  <p id=\"noRoom\" *ngIf=\"invalidRoom\">Room not found!</p>\n  <div class=\"row\" *ngIf=\"!this.showNameField\">\n    <div class=\"col\">\n          <input type=\"text\" class=\"form-control-lg joinForm\" id=\"codeInput\" [(ngModel)]=\"lobbyCode\" placeholder=\"Room code\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"!this.showNameField\">\n    <div class=\"col-12\">\n      <button type=\"button\" class=\"btn btn-lg btn-info joinForm buttonPadding\" id=\"joinButton\" (click)=\"onJoinGame()\">Join your friend's game!</button>\n    </div>\n    <div class=\"col-12\">\n      <h2 class=\"separator\" style=\"white-space:nowrap; overflow:hidden;\">----------------</h2>\n    </div>\n    <div class=\"col-12\">\n      <button type=\"button\" class=\"btn btn-lg btn-info buttonPadding\" id=\"infoButton\" (click)=\"onGetGameInfo()\">How to Play</button>\n    </div>\n  </div>\n\n  <!-- NAME FIELD -->\n  <div class=\"row\" *ngIf=\"this.showNameField\">\n    <div class=\"col\">\n    <h3>What is your name?</h3>\n    <h6 *ngIf=\"emptyName\" class=\"invalid\">Name cannot be empty!</h6>\n    <h6 *ngIf=\"invalidName\" class=\"invalid\">Looks like your friend is already using that name.</h6>\n    <h6 *ngIf=\"invalidName\" class=\"invalid\">Try adding some or all letters of your last name!</h6>\n      <input type=\"text\" class=\"form-control-lg joinForm\" id=\"nameInput\" [(ngModel)]=\"name\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"this.showNameField\" id =\"infoButtonContainer\">\n    <div class=\"col\">\n      <button type=\"button\" class=\"btn btn-lg btn-success joinForm buttonPadding\" id=\"joinButton\" (click)=\"onEnterName()\">Enter game</button>\n    </div>\n  </div>\n\n  <!-- Pop up boxes -->\n  <div class=\"row\">\n    <div class=\"col\">\n      <app-alert-popup #alertPopup></app-alert-popup>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SocketService } from '../socket.service';\n\n\n@Component({\n  selector: 'app-my-cards',\n  templateUrl: './my-cards.component.html',\n  styleUrls: ['./my-cards.component.css']\n})\nexport class MyCardsComponent implements OnInit {\n  myCardsSubscription: Subscription;\n  myCards : Array<string>;\n  constructor(private socketService: SocketService) { }\n\n  ngOnInit(): void { \n    this.initMyCardsSubscription();\n  }\n\n  initMyCardsSubscription() : void {\n    this.myCardsSubscription = this.socketService.getMyCards().subscribe((cards) => {\n      this.myCards = cards;  \n    });\n  }\n\n  ngOnDestroy(): void {\n    if(this.myCardsSubscription) {\n      this.myCardsSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"accordion\" id=\"myCards\">\n    <div class=\"card text-white bg-dark\">\n      <div class=\"card-header\" id=\"headingOne\">\n        <h2 class=\"mb-0\">\n          <button class=\"btn btn-link collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n           View My Cards\n          </button>\n        </h2>\n      </div>\n      \n      <div id=\"collapseOne\" class=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#myCards\">\n        <div class=\"card-body\">\n            <p class=\"text-dark\" *ngFor=\"let card of myCards;\">{{card}}</p>\n        </div>\n      </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>page not found :( sorry bout that</p>\n","import { Component, OnInit, Input, Output, EventEmitter, SimpleChanges, ViewChild, ElementRef } from '@angular/core';\nimport { SocketService } from '../socket.service';\nimport { cardMode } from '../../entity/data-structures/card-modes';\n\n@Component({\n  selector: 'app-player-block',\n  templateUrl: './player-block.component.html',\n  styleUrls: ['./player-block.component.css']\n})\nexport class PlayerBlockComponent implements OnInit {\n  @Input() player: any;\n  @Input() currMode: cardMode;\n  @Input() cardVotingOn: string;\n  @Output() voted = new EventEmitter();\n  @ViewChild(\"voteButton\", {read: ElementRef}) voteButton: ElementRef;\n\n  //used in the html file to determine if button is grayed out (disabled) or colored (enabled)\n  votingEnabled: boolean;\n\n  constructor(private socketService: SocketService) { }\n\n  ngOnInit(): void {\n  }\n  ngAfterViewInit() {\n    if(this.currMode == cardMode.voting) {\n      setTimeout(() => {\n        this.votingEnabled = true;\n      });\n      \n    }\n    else {\n      setTimeout(() => {\n        this.votingEnabled = false;\n      });\n    }\n  }\n  \n  ngOnChanges(changes : SimpleChanges): void{\n    if(changes.currMode && this.voteButton != null) {\n      if(this.currMode == cardMode.voting) {\n        this.votingEnabled = true;\n      }\n      else {\n        this.votingEnabled = false;\n      }\n    }\n  }\n\n  vote() : void {\n    if(this.votingEnabled) {\n      this.socketService.submitVote(this.player, this.cardVotingOn);\n\n      //after emitting the vote event, gameview will change currMode to waiting, and disable voting buttons\n      this.voted.emit(true);\n    }\n  }\n}\n","<div class=\"playerButton\">\n    <button type=\"button\" id=\"voteButton\"\n        [className]=\"votingEnabled ? 'btn btn-primary' : 'btn btn-light'\"\n        (click) = \"vote()\"\n        #voteButton>\n        <div id=\"name\">{{ player.name }}</div>\n        <div id=\"score\">{{ player.votes.length }}</div>\n    </button>\n</div>","import { Component, OnInit, SimpleChanges, SystemJsNgModuleLoader } from '@angular/core';\nimport { Input, ViewChild, ElementRef } from '@angular/core';\nimport { CardService } from '../card.service';\nimport { SocketService } from '../socket.service';\nimport Card from 'src/entity/Card';\nimport { cardMode } from '../../entity/data-structures/card-modes';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-playing-card',\n  templateUrl: './playing-card.component.html',\n  styleUrls: ['./playing-card.component.css']\n})\n\nexport class PlayingCardComponent implements OnInit {\n\n\n  @Input() currMode : cardMode;\n  @Input() votingPhraseText : string;\n  @Input() numPlayers : number;\n  @Input() cardData : Card;\n  @ViewChild(\"cardBackText\", {read: ElementRef}) cardText: ElementRef;\n  @ViewChild(\"cardFlipper\", {read: ElementRef}) card: ElementRef;\n  @ViewChild(\"choiceButton\", {read: ElementRef}) choiceButton: ElementRef;\n\n  cardFlipTime : number = 600;\n  testCard : Card;\n  backendCardSubscription: Subscription;\n\n  constructor(private cardService: CardService,\n              private socketService: SocketService) { }\n\n  ngOnInit(): void {\n  }\n  ngAfterViewInit(): void {\n    //this is in ngAfterViewInit because the card ElementRef must first be loaded\n    // I think really only the second conditional is necessary, but the other \n    // conditionals guard against bad async behavior\n    if (this.currMode === undefined) {\n      this.cardText.nativeElement.textContent = \"Loading...\"\n    }\n    else if (this.currMode as cardMode !== cardMode.myTurn as cardMode) {\n      this.transitionToNewMode();\n    }\n    else {\n      this.cardText.nativeElement.textContent = this.cardData.card_text;\n    }\n  }\n\n  //when the mode changes (players turn to pick card or vote  ), notify the card so it can transition to the new mode\n  ngOnChanges(changes : SimpleChanges): void{\n    if(this.currMode !== undefined && changes.currMode) {\n      console.log(`new mode: ${this.currMode}`);\n      this.transitionToNewMode();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.backendCardSubscription) {\n      this.backendCardSubscription.unsubscribe();\n    }\n  }\n\n  //modify the text and flip the cards as necessary to enter the new mode\n  transitionToNewMode() : void {\n    console.log('transition');\n    if(this.card != null){\n      switch(this.currMode){\n        case cardMode.voting: {\n          this.cardText.nativeElement.textContent = \"\";\n          this.transitionCardToFace(\"front\");\n          if(this.votingPhraseText == null) {\n            this.cardText.nativeElement.textContent = \"vote above !\";\n          }\n          else {\n            this.cardText.nativeElement.textContent = this.votingPhraseText;\n          }\n          break;\n        }\n        case cardMode.waiting: {\n          this.cardText.nativeElement.textContent = \"\";\n          this.transitionCardToFace(\"front\");\n          this.cardText.nativeElement.textContent = \"waiting ...\";\n          break;\n        }\n        case cardMode.myTurn: {\n          this.cardText.nativeElement.textContent = \"\";\n          this.transitionCardToFace(\"back\");\n          this.cardText.nativeElement.textContent = this.cardData.card_text;\n          break;\n        }\n      }\n      this.disableCardChooseButton();\n    }\n  }\n\n  //disable the choice button to select a card when it is not a player's turn\n  disableCardChooseButton(){\n    let choiceButtonIsDisabled : Boolean = this.choiceButton.nativeElement.classList.contains('disabled');\n    if((this.currMode == cardMode.voting && !choiceButtonIsDisabled) ||\n       (this.currMode == cardMode.myTurn && choiceButtonIsDisabled) ||\n       (this.currMode == cardMode.waiting && !choiceButtonIsDisabled))\n    {\n      this.choiceButton.nativeElement.classList.toggle('disabled');\n    }\n  }\n\n  //flip a card over to the desired face side\n  transitionCardToFace(face : String) : void {\n    let cardIsOnFace : Boolean = this.card.nativeElement.classList.contains('flip');\n    \n    //switch statement on which card face we would like to end up at after some fancy flipping\n    switch(face){\n      case(\"front\"): {\n        console.log('to front');\n        if(cardIsOnFace) {\n          setTimeout(() => this.card.nativeElement.classList.toggle('flip'), this.cardFlipTime);\n          this.card.nativeElement.classList.toggle('flip');\n        }\n        else { this.card.nativeElement.classList.toggle('flip'); }\n        break;\n      }\n      // NOTE: setTimeout is an asynchronous function, so toggling nativeElement outside of\n      // a setTimeout will always execute faster regardless of position in code\n      case(\"back\"): {\n        console.log('to back');\n        if(cardIsOnFace) {\n          this.card.nativeElement.classList.toggle('flip');\n        }\n        break;\n      }\n    }\n  }\n\n  onCardClick(card : HTMLElement) : void{\n    if(this.currMode == cardMode.myTurn){\n      card.classList.toggle('flip');\n    }\n  }\n\n  onCardPicked() : void {\n    if (this.numPlayers > 0) {\n      //console.log(\"card picked: \" + this.cardText.nativeElement.textContent);\n      this.socketService.pickCard(this.cardData);\n    }\n    else {\n      // The alert popup is in the parent component, and there's no easy way to trigger\n      // it from this component. Thus to prevent someone from picking a card when there's only\n      // one person in the lobby, we just pass this function null.\n      // The null is handled in the backend to not do any meaningful work, and when that\n      // gets back to the frontend and parent component through the socket service,\n      // it can still trigger the alert popup.\n      this.socketService.pickCard(null);\n    }\n  }\n\n}\n","<div class=\"flip-container w-100 h-100\"  #cardFlipper (click) = onCardClick(cardFlipper)>\n\t<div class=\"flipper\">\n\t\t<div class=\"front\">\n\t\t\t<p>Flip me !</p>\n\t\t</div>\n\t\t<div class=\"back\">\n\t\t\t<p #cardBackText>Back text</p>\n\t\t\t<button class=\"choiceButton btn btn-primary\" #choiceButton (click) = \"onCardPicked()\">Pick me!</button>\n\t\t</div>\n\t</div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { SocketService } from '../socket.service';\n\n@Component({\n  selector: 'app-results-popup',\n  templateUrl: './results-popup.component.html',\n  styleUrls: ['./results-popup.component.css']\n})\nexport class ResultsPopupComponent implements OnInit {\n  @ViewChild(\"resultsText\", {read: ElementRef}) resultsText: ElementRef;\n\n  popupIsOpen : boolean;\n  voteWinner : any;\n  cardToSend : string;\n  tiedWinners : Array<any>;\n  isAtie : boolean;\n\n  constructor(private socketService: SocketService) { }\n\n  ngOnInit(): void {\n    this.isAtie = false;\n    this.tiedWinners = [];\n    this.popupIsOpen = false;\n  }\n\n  //TODO handle ties\n  parseVoteResults(voteResults: Array<any>, winner : any) : string {\n    var parsedResults = \"\";\n    var reachedArrElements = [];\n\n    //sort the names so results display consistantely \n    voteResults.sort((a, b) => (a.name > b.name) ? 1 : -1)\n\n    voteResults.forEach(function (player) {\n      if(!reachedArrElements.includes(player.name)){\n        var numVotes = voteResults.filter((value) => value.name == player.name).length;\n        parsedResults += (player.name + \" got \" + numVotes + \" votes! \\n\");\n\n        reachedArrElements.push(player.name);\n      }\n    });\n    \n    \n    parsedResults += (\"\\n\" + winner.name + \" wins the card.\");\n    parsedResults += (\"\\n\\nReveal the results to the other players!\");\n    return parsedResults;\n  }\n  open(voteResults: Array<any>, winners: Array<any>, cardText: string) : void {\n    this.popupIsOpen = true;\n    this.cardToSend = cardText;\n\n    if(winners.length == 1) {\n      this.resultsText.nativeElement.textContent = this.parseVoteResults(voteResults, winners[0]);\n      this.voteWinner = winners[0];\n      this.isAtie = false;\n    }\n    else {\n      this.tiedWinners = winners;\n      this.isAtie = true;\n      this.resultsText.nativeElement.textContent = \"Looks like we got ouselves a good old Mexican standoff (there was a tie). Break the tie!\";\n    }\n  }\n\n  breakTie(selectedPlayer) : void {\n    this.voteWinner = selectedPlayer;\n    this.close();\n  }\n\n  close() : void {\n    this.popupIsOpen = false;\n    this.socketService.sendVoteResultsToOtherPlayers(this.voteWinner, this.cardToSend);\n    this.socketService.giveUpTurn();\n  }\n}\n","<div class=\"modal fade\" id=\"resultsModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"resultsModalTitle\" aria-hidden=\"true\" [ngStyle]=\"{'display': popupIsOpen ? 'block' : 'none', 'opacity': 1}\">\n    <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"resultsModalTitle\">Vote Results</h5>\n        </div>\n        <div class=\"modal-body\">\n          <p #resultsText></p>\n        </div>\n        <div class=\"modal-footer\">\n          <button *ngIf=\"!isAtie\" type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\" (click)=\"close()\">End Turn</button>\n          <div class = \"row\" *ngIf=\"isAtie\">\n            <div class=\"col-6 tie-break-col\" *ngFor=\"let player of tiedWinners;\">\n              <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" (click)=\"breakTie(player)\">{{player.name}}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-room-code',\n  templateUrl: './room-code.component.html',\n  styleUrls: ['./room-code.component.css']\n})\nexport class RoomCodeComponent implements OnInit {\n\n  @Input() lobbyCode: string;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as io from 'socket.io-client';\nimport { Observable } from 'rxjs';\nimport Card from 'src/entity/Card';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {\n  socket: any = null;\n  connectedRoom: string = '';\n  isTurnOnStart: boolean = null;\n  allOtherPlayersOnStart: Array<any> = [];\n\n  constructor() { }\n\n  //get list of all players excluding this current one\n  getAllOtherPlayersList(allPlayers: Array<any>): Array<any>{\n    console.log(\"all players: \" + allPlayers);\n    var output: Array<any> = [];\n    allPlayers.forEach((player) =>{\n      if(player.Id != this.socket.id){\n        output.push(player);\n      }\n    });\n    console.log(\"all other players: \" + output);\n    return output;\n  }\n\n  setUpSocket() {\n    if (this.socket) {\n      return;\n    }\n    //var hostname = 'http://localhost:3000';\n    //var hostname = 'https://strawberry-sundae-17314.herokuapp.com';\n    //var hostname = 'http://localhost:5000';\n    var hostname = 'http://www.qcards.us';\n\n    this.socket = io(hostname);\n  }\n\n  getIsConnected() : Observable<boolean>{\n\n    //this.socket.emit('clientGetIsTurn', this.connectedRoom);\n    let observable = new Observable<boolean>( observer => {\n      this.socket.on('connected', (code, turn, playerList) => {\n        this.connectedRoom = code;\n        this.isTurnOnStart = turn;\n        this.allOtherPlayersOnStart = this.getAllOtherPlayersList(playerList);\n        console.log(\"is connected to \" + code + \", and is turn? \" + turn + \", \" + playerList);\n        observer.next();\n      });\n    });\n\n    return observable;\n  }\n\n  disconnectSocket() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    this.socket = null;\n    this.connectedRoom = '';\n    this.isTurnOnStart = null;\n    this.allOtherPlayersOnStart = null;\n  }\n\n  joinNewRoom(name: String): void {\n    if (this.connectedRoom !== '') {\n      console.log(\"Cannot connect to new lobby while in another lobby\");\n    }\n    else {\n      this.socket.emit('newLobby', name);\n    }    \n  }\n\n  joinExistingRoom(desiredRoom: String, name: String) {\n    if (this.connectedRoom !== '') {\n      console.log(\"Cannot connect to new lobby while in another lobby\");\n    }\n    else {\n      this.socket.emit('joinLobby', desiredRoom, name);\n    }\n  }\n\n  sendChatMessage(message: string) {\n    this.socket.emit('clientSendChat', this.connectedRoom, message);\n  }\n\n  receiveChatMessage() {\n    let observable = new Observable<string>( observer => {\n      this.socket.on('serverSendChat', (msg) => {\n        console.log(msg);\n        observer.next(msg);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  giveUpTurn(){\n    this.socket.emit('clientGivingUpTurn', this.connectedRoom);\n  }\n\n  getIsTurn() : Observable<boolean>{\n    let observable = new Observable<boolean>( observer => {\n      this.socket.on('serverSendIsTurn', (isTurn) => {\n        observer.next(isTurn);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  //a round is cancelled if it is someone's turn to pick a card and collect votes, but they disconnect\n  getRoundIsCancelled() : Observable<boolean> {\n    let observable = new Observable<boolean>( observer => {\n      this.socket.on('roundCancelled', (idNextRoundHost) => {\n        var isNewHost : boolean;\n        isNewHost = false;\n        if(this.socket.id == idNextRoundHost){\n          isNewHost = true;\n        }\n        observer.next(isNewHost);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  //signal to the server that a card was picked\n  pickCard(card : Card) : void {\n    this.socket.emit('clientPickedCard', this.connectedRoom, card);\n  }\n\n  //wait for the card picked by player with the turn\n  getPickedCard() : Observable<string>{\n    let observable = new Observable<string>( observer => {\n      this.socket.on('serverSendCardPicked', (cardObject) => {\n        if (cardObject) {\n          observer.next(cardObject.card_text);\n        }\n        else {\n          observer.next(null);\n        }\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  //wait for the voting results for the round\n  getVoteResults() : Observable<Array<any>>{\n    let observable = new Observable<Array<any>>( observer => {\n      this.socket.on('serverSendVoteResults', (results, winners, cardVotingOn) => {\n\n        observer.next([results, winners, cardVotingOn]);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  getMyCards() : Observable<Array<any>>{\n    let observable = new Observable<Array<any>>( observer => {\n      this.socket.on('serverSendUpdatedCards', (cards) => {\n\n        observer.next(cards);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n  revealVoteResults(results : Array<any>) : void {\n    this.socket.emit('revealVoteResults', this.connectedRoom, results);\n  }\n\n  submitVote(playerVotedFor, cardVotingOn : String) : void{\n    this.socket.emit('clientSendVote', this.connectedRoom, playerVotedFor, cardVotingOn, this.socket.id);\n  }\n\n  sendVoteResultsToOtherPlayers(voteWinner, cardVotingOn){\n    this.socket.emit('clientEndingTurn', this.connectedRoom, voteWinner, cardVotingOn);\n  }\n\n  //get the list of all players excluding current player\n  getOtherPlayerList() : Observable<Array<any>>{\n    let observable = new Observable<Array<any>>( observer => {\n      this.socket.on('serverUpdatePlayerList', (msg) => {\n        var output: Array<any> = this.getAllOtherPlayersList(msg);\n        observer.next(output);\n      });\n      return () => {\n        this.disconnectSocket();\n      };\n    });\n\n    return observable;\n  }\n\n}\n","export default class Card {\r\n    _id?: string;\r\n    card_text: string;\r\n    card_num: number;\r\n\r\n    constructor(json: any) {\r\n        if (json) {\r\n            this._id = json._id;\r\n            this.card_text = json.card_text;\r\n            this.card_num = json.card_num;\r\n            \r\n        }\r\n        else {\r\n            this._id = '';\r\n            this.card_text = '';\r\n            this.card_num = -1;\r\n        }\r\n    }\r\n}","export enum cardMode {myTurn, voting, waiting};","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}